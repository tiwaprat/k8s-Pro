ABOUT PROJECT: This project outlines all the steps to create a basic kubernetes cluster with infrastructure on AWS EC2 Instances. We will also run a spring boot application (Enhanced Student app) on this cluster to verify setup. 

ABOUT APPLICATION: The Enhanced student App a.k.a "esa" application is at /infra/EnrichedStudentApp/ folder it is a sprint boot based application. On access application shows a single html page which can record student information and can show on the same page. We can create and delere the records.
                   in mysql database.  

ABOUT INFRA: We would be provisioning total 4 EC2 Instances. 
             1. for controlplan components.   
             2. Building docker images and pushing them into dockerhub (buildserver)
             3. 2 workernodes one for myesa application image and another for mysql image
             
Steps to Follow:
1. Fork git repo https://github.com/tiwaprat/k8s-Pro.git 
2. Create docker image and push into your dockerhub repo : 
   * Provision a ubuntu based ec2 instance
   * sudo hostnamectl set buildserver
   * sudo apt update
   * sudo apt install openjdk-17-jdk maven  -y 
   * sudo apt install docker.io -y 
   * git clone https://github.com/tiwaprat/k8s-Pro.git
   * mkdir EnrichedStudentApp
   * mv -r /k8s-Pro/infra/EnrichedStudentApp . 
   * cd 
   * cd  EnrichedStudentApp     [Verify application.properties file for all env variables these variables will provided as arguments at the time   of pod creation]
   * mvn  clean package -U
   * Verify if build is successfull and cd target/ dir do exists with jar file. 
   * cp target/student-app-1.0.0.jar ~/k8s-Pro/infra/DockerImageBuild/
   * cd  ~/k8s-Pro/infra/DockerImageBuild/
   * mv student-app-1.0.0.jar student.jar
   * sudo docker build -t myesa:2.0 .      [Choose the tag as per your env/choice]
   * docker login -u awsaug2021   [use your dockerhub user name ]
   * sudo docker tag myesa:2.0 awsaug2021/myesa:2.0
   * sudo docker push awsaug2021/myesa:2.0 

   At this point our esa application is baked into docker image and ready to be used. 

------------------------------CLUSTER SETUP--------------------------------------------------------
NOTE: IN THIS EX I HAVE CHANGED HOSTNAME OF ALL NODES WHICH HAS CREATED ISSUE AT THE TIME OF LB SERVICE CREATION. WHICH GOT RESOLVED WITH NODE PATCHING. TO AVOID THIS SKIP CHANGING HOSTNAME ATLEAST BEFORE  JOINING K CLUSTER. THIS IS  ONLY FOR CCM MANAGED BY USER ON EC2.  

Master node provisioning : 
* spinup 2vcpu , 2GB RAM ubuntu image. 
* SG Open inbounds ports :
* clone repository : https://github.com/tiwaprat/k8s-Pro.git
* Use controlPlaneNode.sh script to setup cluster 
* Note token details. This will be used in adding worker nodes 
* Hostname change (optional)

WorkerNodeProvisioning : 
* spinup 1vcpu, 2GB RAM ubuntu image in same VPC 
* SG Open inbounds ports :
* use workerNode.sh script to setup run time and k8s. 
* use token from master node to join cluster
* Hostname change optional

Creating kubernetes objects:
* Create dbsecret,  mysql pod , Myqldb service, dockerLoginObject , myesa app pod, node or loadbalancer service.
* Verify each service if they have correct end points. 
* Check  health of target nodes of LoadBalancer. 
* Verify cluster setup and myesa app using LB DNS



------------------  PROVISIONING LOADBALACER SERVICE--------------------------------
Unlike nodeport and clusterIp service Loadbalancer service required CCM (Cloud controler manager) to be installed and run as pod on control-paln node. Incase of EKS we dont need CCM configuration beacuse that is already done for us. Since our cluster is on EC2 so we have to manage this control plan component. 
CCM runs as a ds pod only on controlplan node as calls cloud api on behalf of kubernetes to provision ELB when we create LB service. this require specific IAM roles for EC2 instance where control plan is configured. I have already created IAM policy and IAM role  with name "Kubernetes-CloudControlerManager" inside script folder policy is documented.ccm-pod.yaml is also available and can be edited as per your cluster. the version of AWS CCM shloud be same as of cluster version. 
We also have to tag Ec2 instances (mn + wn) and subnets 

key = kubernetes.io/cluster/<name of cluster, I used esa>
value = owned
We also have to use - --controllers=*,-route  incase we are using external cni plugin like calico or flannel. but If we are using AWS cni we have to give cluster cidr that pod cidr

Now use ccm-pod.yaml and  provision ds : Hopefully it will run without any issue
Finally ccm pod created but after that when I tried to create loadbalancer service I faced issue. My lb service was in pending state. why ? because I  have changed node names using hostnamectl long before creating k8s cluster as master , worker1 , worker2 ...these names kubelet has registered but EC2 metadata is still using old names. And CCM need these names to be same. So I had use this patch on each node object.
ProviderID:                   aws:///us-east-1d/i-02ff08f41fbdcb280   [change subnet and ec2 id as per your instance]
Suggestion: Do not change hostname or change after joinig the node to cluster. 

Finally lb is provisioned. If you face any issue provisioning lb always check the logs of ccm pod. Sometimes we might need to restart couple of pods to get things work. On sucessful lb provision 

1. target instance will be in healthy state 
2. node public or private ip + node port [Nodeport which get created along with lb] will be accessible
3. Loadbalacer DNS[something like this : http://ab81814b66d2c4082a00d74ae3235bd0-1543644628.us-east-1.elb.amazonaws.com/ ] will be accessible
4. In this usecase my app is running only on one node so LB is basically sending packets to only one node. 



----------------------------------------------------------NOTES-------------------------------------------------------------------------

   Note: command to copy files and folders fron ec2 to local machine 
   scp -i /path/to/key.pem ec2-user@<EC2_PUBLIC_IP>:/remote/path/to/file /local/path
   Ex:  scp -i "key.pem" -r ubuntu@ec2-54-157-210-46.compute-1.amazonaws.com:/home/ubuntu/EnrichedStudentApp/ .
   k run test --rm --image busybox -i -- /bin/sh    To test dns resolution
   wget -O- https://ec2.us-east-1.amazonaws.com

   Some times if the load balancer service is not getting deleted , edit service remove finalizer section and then run 
   kubectl delete svc <service-name> --grace-period=0 --force
  
